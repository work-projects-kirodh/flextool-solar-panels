set entity := source_node sink_node convert_1way_1variable;
set process := convert_1way_1variable;
set node := source_node sink_node;
set commodity := fuel;
set reserve := ;
set time := t01 t02;
set debug := method_1way_1variable;

set nodeBalance := sink_node;
set nodeState := ;
set nodeInflow := sink_node;
set process_method := 
  (convert_1way_1variable, 1way_1variable) 
;
set reserve_node := ;
set read_process_source_sink := 
  (convert_1way_1variable, source_node, sink_node) 
;
set process_reserve_source_sink := 
;
set commodity_node := ('fuel', 'source_node');

set pet_invest :=;
set pet_divest :=;

param t_jump := ["t01"] 0, ["t02"] -1;

param p_commodity := 
["fuel", "source_node", "price", "t01"] 10,
["fuel", "source_node", "price", "t02"] 10,
;

param p_process :=
["convert_1way_1variable", "efficiency", "t01"] 0.4
["convert_1way_1variable", "efficiency", "t02"] 0.5
;

param p_process_source := 
;

param p_process_sink :=
[convert_1way_1variable, sink_node, capacity] 10
;

param p_inflow :=
[sink_node, t01] -10
[sink_node, t02] -10
;

param pq_up := 
"sink_node" 10000
;

param pq_down := 
"sink_node" 10000
;

param d_obj := 450;

param d_flow :=
[convert_1way_1variable, source_node, sink_node, 't01'] 10
[convert_1way_1variable, source_node, sink_node, 't02'] 10
;

param d_flow_1_or_2_variable :=
[convert_1way_1variable, source_node, sink_node, 't01'] -25
[convert_1way_1variable, source_node, sink_node, 't02'] -20
;